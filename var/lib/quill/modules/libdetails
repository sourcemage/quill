#---
## @Synopsis libdetails
#---

# for all the fields that could be filled in, check if they were filled in
# and if so, give the user an opportunity to change the value

function query_spell_name(){
if ! [[ $SPELL_NAME ]] ||
   ! query "Is $SPELL_NAME the proper spell name?" y; then
  message "${QUERY_COLOR}Please enter the spell name:${DEFAULT_COLOR}"
  read "SPELL_NAME"
fi
}

function query_spell_source_url(){
if ! [[ $SPELL_SRC_URL ]] ||
   ! query "Is $SPELL_SRC_URL the proper source url?" y; then
  message "${QUERY_COLOR}Please enter the url of the source:${DEFAULT_COLOR}"
  read "SPELL_SRC_URL"
fi
}

function query_spell_license(){
if ! [[ $SPELL_LICENSE ]] ||
   ! query "Is $SPELL_LICENSE the proper license?" y; then
  message "${QUERY_COLOR}Please enter the license of the spell:${DEFAULT_COLOR}"
  read "SPELL_LICENSE"
fi
}

function query_spell_url(){
if ! [[ $SPELL_URL ]] ||
   ! query "Is $SPELL_URL the proper website?" y; then
  message "${QUERY_COLOR}Please enter a website for the spell:${DEFAULT_COLOR}"
  read "SPELL_URL"
fi
}

function query_spell_short_description(){
if ! [[ $SPELL_SHORT_DESCRIPTION ]] ||
   ! ( message "${QUERY_COLOR}Is${DEFAULT_COLOR}\n$SPELL_SHORT_DESCRIPTION"
       query "the proper short description?${DEFAULT_COLOR}" y ; ) ; then
  message "${QUERY_COLOR}Please enter a short description of the spell:${DEFAULT_COLOR}"
  read "SPELL_SHORT_DESCRIPTION"
fi
}

function query_spell_description(){
if ! test -f ${QUILL_TMP_DIR/${SPELL_NAME} ||
   ! ( message "${QUERY_COLOR}Is${DEFAULT_COLOR}"
       cat ${QUILL_TMP_DIR/${SPELL_NAME}
       query "the proper long description?${DEFAULT_COLOR}" y ; ) ; then
  message "${QUERY_COLOR}Please enter a description of the spell:${DEFAULT_COLOR}"
  message "${PROBLEM_COLOR}!!!PRESS ENTER TO CONTINUE!!!${DEFAULT_COLOR}"
  read
  ${EDITOR:-nano} ${QUILL_TMP_DIR/${SPELL_NAME}
fi
}

function check_if_tarball(){
# Checks if the given file is a valid tarball by trying to peek inside it
# and seeing if there is an error message.
# Syntax: check_if_tarball ${QUILL_TMP_DIR}/${SPELL_SRC_FILE}
# WARNING: Also returns 0 if file simply does not exist, so this should
# never be used without first making sure there is a file to check.
  local SRC_FILE="$1"
  if [[ -z `tar tf "$SRC_FILE" 2>&1 | grep "^tar: " | head -n1' ]]; then
    return 0
  else
    return 1
  fi
}

function hunt_src_dir() {
# Reads the archive's root directory from a tarball. Replaces spellname
# and version with $SPELL and $VERSION. Removes the trailing /
# character. The result should be a string that can be used in DETAILS
# where SOURCE_DIRECTORY is defined.
# This function relies on the assumption that the first directory inside
# the source tarball is also the same one where 'make' or a similar
# command should be run from.
# Syntax: hunt_src_dir ${QUILL_TMP_DIR}/${SPELL_SRC_FILE} ${SPELL_NAME}
# ${SPELL_VERSION}
  local SRC_FILE="$1"
  local SPELL="$2"
  local VERSION="$3"
tar tf "$SRC_FILE" | sed -e 
"s=${SPELL}=\$\{SPELL\}=g;s=${VERSION}=\$\{VERSION\}=g;s=/$==g;q"
}

function add_details()
{
QUILL_SPELL_HASH="$(hash_get ${QUILL_TMP_DIR}/${SPELL_SRC_FILE})"


SPELL_DATE=$(date +%Y%m%d)
#Generate DETAILS

message "Generating DETAILS file..."

echo \
"           SPELL=${SPELL_NAME}
         VERSION=${SPELL_VERSION}
          SOURCE=${SPELL_SRC_FILE}
   SOURCE_URL[0]=${SPELL_SRC_URL}
     SOURCE_HASH=sha512:${QUILL_SPELL_HASH}
SOURCE_DIRECTORY=\${BUILD_DIRECTORY}/${SPELL_SRC_DIR}
        WEB_SITE=${SPELL_URL}
         ENTERED=${SPELL_DATE}
         UPDATED=${SPELL_DATE}
      LICENSE[0]=${SPELL_LICENSE}
       BUILD_API=2
           SHORT=\"${SPELL_SHORT_DESCRIPTION}\"
cat << EOF
$(cat ${QUILL_TMP_DIR}/$SPELL_NAME |fmt -u -w80)
EOF" > DETAILS
rm ${QUILL_TMP_DIR}/$SPELL_NAME

message "Done..."

}
