#---
## @Synopsis libdetails
#---

# for all the fields that could be filled in, check if they were filled in
# and if so, give the user an opportunity to change the value

function query_spell_name(){
if ! [[ $SPELL_NAME ]] ||
   ! query "Is $SPELL_NAME the proper spell name?" y; then
  message "${QUERY_COLOR}Please enter the spell name:${DEFAULT_COLOR}"
  read "SPELL_NAME"
fi
}

function query_spell_source_url(){
if ! [[ $SPELL_SRC_URL ]] ||
   ! query "Is $SPELL_SRC_URL the proper source url?" y; then
  message "${QUERY_COLOR}Please enter the url of the source:${DEFAULT_COLOR}"
  read "SPELL_SRC_URL"
fi
}

function query_spell_license(){
if ! [[ $SPELL_LICENSE ]] ||
   ! query "Is $SPELL_LICENSE the proper license?" y; then
  message "${QUERY_COLOR}Please enter the license of the spell:${DEFAULT_COLOR}"
  read "SPELL_LICENSE"
fi
}

function query_spell_url(){
if ! [[ $SPELL_URL ]] ||
   ! query "Is $SPELL_URL the proper website?" y; then
  message "${QUERY_COLOR}Please enter a website for the spell:${DEFAULT_COLOR}"
  read "SPELL_URL"
fi
}

function query_spell_short_description(){
if ! [[ $SPELL_SHORT_DESCRIPTION ]] ||
   ! ( message "${QUERY_COLOR}Is${DEFAULT_COLOR}\n$SPELL_SHORT_DESCRIPTION"
       query "the proper short description?${DEFAULT_COLOR}" y ; ) ; then
  message "${QUERY_COLOR}Please enter a short description of the spell:${DEFAULT_COLOR}"
  read "SPELL_SHORT_DESCRIPTION"
fi
}

function query_spell_description(){
if ! test -f ${QUILL_TMP_DIR/${SPELL_NAME} ||
   ! ( message "${QUERY_COLOR}Is${DEFAULT_COLOR}"
       cat ${QUILL_TMP_DIR/${SPELL_NAME}
       query "the proper long description?${DEFAULT_COLOR}" y ; ) ; then
  message "${QUERY_COLOR}Please enter a description of the spell:${DEFAULT_COLOR}"
  message "${PROBLEM_COLOR}!!!PRESS ENTER TO CONTINUE!!!${DEFAULT_COLOR}"
  read
  ${EDITOR:-nano} ${QUILL_TMP_DIR/${SPELL_NAME}
fi
}

#--
## @Synopsis assign to SPELL_SRC_FILE the filename and to VERSION the
## @Synopsis version number parsed from source url
#---
function parse_spell_source_file_info(){
SPELL_SRC_FILE=$(expr "$SPELL_SRC_URL" : '.*/\(.*\)')
SPELL_SANITIZED_FILE_NAME=$(expr "$SPELL_SRC_FILE" : '\(.*\)[-|_][0-9]')
SPELL_VERSION=$(expr "$SPELL_SRC_FILE" : "${SPELL_SANITIZED_FILE_NAME}[-|_]\(.*\)\.t")
}

#---
## @Synopsis print on screen info gathered from source url
#---
function show_spell_source_file_info(){
echo "Sanitized filename: ${SPELL_SANITIZED_FILE_NAME}"
echo "Version: ${SPELL_VERSION}"
echo "URL: ${SPELL_SRC_URL}"
}

#---
## @Synopsis subsitute expanded with escaped SPELL and VERSION in
## @Synopsis SPELL_SRC_URL, call substitute_with_mirror_variables
#---
function substitute_url_variables(){
  SPELL_SRC_URL=${SPELL_SRC_URL//${SPELL}/\${SPELL\}}
  SPELL_SRC_URL=${SPELL_SRC_URL//${VERSION}/\${VERSION\}}
  substitute_with_mirror_variables
}

#---
## @Synopsis substitute download mirror url names in SPELL_SRC_URL with
## @Synopsis their respective variable names
#---
function substitute_with_mirror_variables(){
local MIRROR_LIST_FILE
local MIRROR_VARIABLE
local MIRROR_ENTRY
for MIRROR_LIST_FILE in $(ls /etc/sorcery/mirrors/); do
  MIRROR_VARIABLE="${MIRROR_LIST_FILE}_URL"
  for MIRROR_ENTRY in $(cat /etc/sorcery/mirrors/${MIRROR_LIST_FILE}); do
    if [[ "$MIRROR_ENTRY" =~ "://" ]]; then
      SPELL_SRC_URL=${SPELL_SRC_URL//$MIRROR_ENTRY/\$\{$MIRROR_VARIABLE\}}
    fi
  done
done
}

#---
## @Synopsis check if file is a tarball
## @return 0 if a tarball
## @return 1 if not a tarball
#---
function check_if_tarball(){
if [[ -z `tar tf "${QUILL_TMP_DIR}/${SPELL_SRC_FILE}" 2>&1 | grep "^tar: " | head -n1` ]]; then
  return 0
else
  return 1
fi
}

#---
## @Synopsis assign to SPELL_SRC_DIR the source dir inside a tarball,
## @Synopsis substitute expanded with escaped SPELL and VERSION
## @return 0 if a tarball and has a src dir
## @return 1 if a tarball but has no src dir
## @return 2 if not a tarball.
#---
function hunt_src_dir(){
if check_if_tarball; then
  SPELL_SRC_DIR=$(tar tf "${QUILL_TMP_DIR}/${SPELL_SRC_FILE}" | grep / | sed -e "s=/.*$==g;q")
  if [ -n "$SPELL_SRC_DIR" ]; then
    SPELL_SRC_DIR=${SPELL_SRC_DIR//${SPELL}/\${SPELL\}}
    SPELL_SRC_DIR=${SPELL_SRC_DIR//${VERSION}/\${VERSION\}}
    return 0
  else
    return 1
else
  unset SPELL_SRC_DIR
  return 2
fi
}

#---
## @Synopsis generate DETAILS file
#---
function add_details(){
QUILL_SPELL_HASH="$(hash_get ${QUILL_TMP_DIR}/${SPELL_SRC_FILE})"


SPELL_DATE=$(date +%Y%m%d)
#Generate DETAILS

message "Generating DETAILS file..."

echo \
"           SPELL=${SPELL_NAME}
         VERSION=${SPELL_VERSION}
          SOURCE=${SPELL_SRC_FILE}
   SOURCE_URL[0]=${SPELL_SRC_URL}
     SOURCE_HASH=sha512:${QUILL_SPELL_HASH}
SOURCE_DIRECTORY=\${BUILD_DIRECTORY}/${SPELL_SRC_DIR}
        WEB_SITE=${SPELL_URL}
         ENTERED=${SPELL_DATE}
         UPDATED=${SPELL_DATE}
      LICENSE[0]=${SPELL_LICENSE}
       BUILD_API=2
           SHORT=\"${SPELL_SHORT_DESCRIPTION}\"
cat << EOF
$(cat ${QUILL_TMP_DIR}/$SPELL_NAME |fmt -u -w80)
EOF" > DETAILS
rm ${QUILL_TMP_DIR}/$SPELL_NAME

message "Done..."
}
