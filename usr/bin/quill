#!/bin/bash
#---
## @Synopsis Spell creator script for Source Mage GNU/Linux
## @Copyright Copyright 2006-2008 Source Mage GNU/Linux
## @License GPL v2 or higher
##
## Asks the user in simple questions about generating a spell.
## @Globals QUILL_VERSION QUILL_MODE HISTORY_DATE QUILL_HOME_DIR QUILL_QUILLRC
## @Globals QUILL_OLD_QUILLRC QUILL_SPELL_DIR QUILL_TMP_DIR QUILL_LIB_DIR
## @Globals QUILL_MODULES QUILL_CONFIG_VERSION QUILL_OUR_CONFIG_VERSION EDITOR
## @Globals QUILL_FETCH_MODE QUILL_TARGET QUILL_UPDATE PROMPT_DELAY BUILD_API
## @Globals SPELL_UPDATED SPELL_NAME actions ANSWER WEB_SITE GRIMOIRE SECTION
## @Globals SPELL_DEPENDENCIES SPELL_OPTIONAL_DEPENDENCIES SPELL_CONFLICTS
## @Globals SPELL_PROVIDES PREPAREISON PREBUILDISON BUILDISON SPELL_SRC_FILE
## @Globals INSTALLISON BS BUILD_DTFILE SPELL_SRC_URL QUILL_ORIG_TARGET
## @Globals UPDATE_COUNTER
##
## @Thanks BearPerson, dufflebunk, afrayedknot
## @Thanks To all testers
## @Contribution abouter, lynxlynxlynx, iuso
##
#---
QUILL_VERSION="$(< /var/lib/quill/version)"
#---
## really basic stuff that should be loaded and set
. /var/lib/sorcery/modules/libmedia
LOCAL_MEDIA_CONFIG=/etc/sorcery/local/media source /etc/sorcery/media
function message() { echo -e "$@"; }
. /var/lib/quill/modules/libcore
## end of skeletal prerequisites - we get the rest later

QUILL_MODE="apprentice"
HISTORY_DATE="$(date +%Y-%m-%d)"

QUILL_HOME_DIR=~/.sourcemage/quill
QUILL_QUILLRC=${QUILL_HOME_DIR}/quillrc
QUILL_OLD_QUILLRC=~/.quillrc
QUILL_SPELL_DIR=~/.sourcemage/spells
QUILL_TMP_DIR=~/.sourcemage/tmp
QUILL_LIB_DIR=/var/lib/quill
QUILL_MODULES=$QUILL_LIB_DIR/modules
QUILL_OUR_CONFIG_VERSION=5
QUILL_CONFIG_VERSION=$QUILL_OUR_CONFIG_VERSION

#---
## Parse the command line parameters and arguments via getopt
#---
QUILL_CMDLINE=$(getopt -o fcysngFHup::amwrhv -l \
  fmxml,perlcpan,rubyraa,savane,savannah,gna,fsf,hackagedb,update,help,purge:: \
  -n 'quill' -- "$@")
if [[ $? != 0 ]]; then
  error_msg "Invalid command line options!"
  sleep 1
  quill_help 103
fi
eval set -- "$QUILL_CMDLINE"
unset QUILL_CMDLINE

while true; do
  case $1 in
      --fmxml|-f) QUILL_FETCH_MODE="fmxml" ;;
   --perlcpan|-c) QUILL_FETCH_MODE="cpan" ;;
    --rubyraa|-y) QUILL_FETCH_MODE="raa" ;;
     --savane|-s) QUILL_FETCH_MODE="savane" ;;
   --savannah|-n) QUILL_FETCH_MODE="savannah" ;;
        --gna|-g) QUILL_FETCH_MODE="gna" ;;
        --fsf|-F) QUILL_FETCH_MODE="fsf" ;;
  --hackagedb|-H) QUILL_FETCH_MODE="hdb" ;;
     --update|-u)
                  QUILL_UPDATE="on" ;;
      --purge|-p)
                  QUILL_MODE="purge"; quill_purge $2 ;;
 --apprentice|-a) QUILL_MODE="apprentice" ;;
       --mage|-m) QUILL_MODE="mage" ;;
     --wizard|-w) QUILL_MODE="wizard" ;;
--reconfigure|-r) QUILL_MODE="reconfigure" ;;
       --help|-h) quill_help ;;
    --version|-v) quill_version ;;
              --) shift; break ;;
               *) error_msg "Invalid parameter $1"
                  sleep 1
                  quill_help 102 ;;

  esac
  shift
done
if [[ -z $1 && -n $QUILL_UPDATE ]]; then
  error_msg "Missing spellname argument!"
  sleep 1
  quill_help 104
elif [[ -n $2 ]]; then
  message "Discarding leftover arguments!"
fi
if [[ -z $QUILL_TARGET ]]; then
  QUILL_TARGET=$(tr '[[:upper:]]' '[[:lower:]]' <<< "$1")
  QUILL_ORIG_TARGET=$1
fi

unset -f message
. /etc/sorcery/config
EDITOR=${EDITOR:-nano}
for i in /var/lib/quill/modules/lib* /var/lib/quill/modules/site_handlers/*
do
  . $i
done
unset i

quill_rc
if [[ ${QUILL_CONFIG_VERSION/0.2.2/1} != $QUILL_OUR_CONFIG_VERSION ]]; then
  QUILL_MODE="reconfigure"
  error_msg "Your quill settings are too old, forcing a reconfiguration!"
  quill_rc
fi

# we should do some quillrc sanity checking someday
[[ ! -d $QUILL_SPELL_DIR ]] &&
  error_msg "Bad QUILL_SPELL_DIR ($QUILL_SPELL_DIR)!" &&
  echo "Running quill --reconfigure in 3 seconds" &&
  sleep 3 &&
  quill_rc

PROMPT_DELAY="31557807"
BUILD_API=2
load_build_api
mkdir -p $QUILL_TMP_DIR
SPELL_UPDATED=n

#---
## Questions and stuff
quill_welcome
if [[ ! -z $QUILL_FETCH_MODE ]]
then
  # fetch various spell variables; some fetchers need the capsy names
  quill_${QUILL_FETCH_MODE}_core $QUILL_TARGET $QUILL_ORIG_TARGET

  # creates SPELL_VERSION and SPELL_SRC_FILE (to be SOURCE)
  parse_spell_source_file_info
fi

if [[ "$QUILL_UPDATE" == "on" ]]
then
  SPELL_NAME=$QUILL_TARGET
  if ! codex_does_spell_exist $SPELL_NAME; then
    query "Is $SPELL_NAME a new spell in QUILL_GIT_DIR?" n ||
    exit 6
  fi
  ask_and_copy_over || exit 7
  cd $QUILL_SPELL_DIR/$SPELL_NAME

  actions=('Update the spell to a newer version' \
            'Add arbitrary HISTORY entries' \
            'Increment/add PATCHLEVEL or SECURITY_PATCH' \
            'Switch to upstream gpg verification' \
            'Deprecate the spell (also for renames)' \
            'Manage/add PRE_BUILD and patches' \
            'List/Edit/Remove/Add spell files' \
            'View changes/generate patch' \
            '--NOOP--' \
            'Copy it here from the grimoire or QUILL_GIT_DIR' \
            'Copy it under QUILL_GIT_DIR' \
            'Copy it back to the grimoire' \
            'Try it out' \
            'Quit' ) #'Manage patches' 'Add a another version'

  while true; do
    unset QUILL_GPG_AD
    echo
    query_list "What do you want to do?" ANSWER "Quit" "${actions[@]}"

    [[ $ANSWER == "Quit" ]] && exit 0

    if [[ $ANSWER == ${actions[0]} || $ANSWER == ${actions[1]} || $ANSWER == ${actions[2]} || $ANSWER == ${actions[3]} ]]
    then
      echo
      [[ -d $QUILL_SPELL_DIR/$SPELL_NAME ]] || ask_and_copy_over || continue
      [[ -e DETAILS.orig ]] || cp DETAILS DETAILS.orig
      echo
    fi
    case "$ANSWER" in
      "${actions[0]}") #"Update the spell to a newer version"

        main_update_loop version_bump

        [[ $UPDATE_COUNTER == 0 ]] && continue # there were no updates

        # check if WEB_SITE is reachable
        trap break INT
        WEB_SITE=$(. DETAILS &> /dev/null; echo $WEB_SITE)
        while ! url_verify "$WEB_SITE" > /dev/null; do
          error_msg "The website is not reachable: $WEB_SITE"
          message "Fix it."
          message "If you're sure it is ok or want to skip this check, just hit ^C (ctrl-c)."
          sleep 3
          quill_edit DETAILS
          add_history_entry "DETAILS: fixed WEB_SITE"
          echo
        done
        trap INT

        # check that all files are executable
        check_executable_bits

        check_description_wrap

        rm DETAILS.orig
        if quad_query "Do you want to review the update or add custom modifications?" \
          $QUILL_MODIFICATIONS
        then
          quill_edit
          echo
        fi
        if quad_query "Do you want to generate a patch for the update?" \
          $QUILL_GEN_PATCH
        then
          quill_generate_patch
        fi

        echo
        message "Done with updating the spell!"
        echo

      ;;
      "${actions[1]}") #"Add an arbitrary HISTORY entry"
        add_user_history_entries
      ;;
      "${actions[2]}") #"Increment/add PATCHLEVEL or SECURITY_PATCH"
        main_update_loop user_increment_patchlevel
      ;;
#      "${actions[2]}") #"Add another version"
#SCM or branch?
#update patchlevel?
#update HISTORY
#copy the spell back to the grimoire?
      "${actions[3]}") #'Switch to upstream gpg verification'
        main_update_loop convert_to_upstream_gpg
      ;;
      "${actions[4]}") # deprecate the spell
        deprecate_menu
      ;;
      "${actions[5]}") # 'Manage/add PRE_BUILD and patches'
        pre_build_menu
      ;;
      "${actions[6]}") # 'List/Edit/Remove/Add spell files'
        file_menu
      ;;
      "${actions[7]}") # 'View changes/generate patch'
        patch_menu
      ;;
      "${actions[8]}") # NOOP
        :
      ;;
      "${actions[9]}") #"Copy it here from the grimoire or QUILL_GIT_DIR"
        ask_and_copy_over || continue
      ;;
      "${actions[10]}") #"Copy it under $QUILL_GIT_DIR"
        copy_to_git || continue
      ;;
      "${actions[11]}") #"Copy it back to the grimoire"
        codex_get_spell_paths $(codex_find_spell_by_name $SPELL_NAME)
        if [[ ! -e $QUILL_SPELL_DIR/$SPELL_NAME ]]
        then
          error_msg "There is nothing to copy back!"
          unset_spell_paths
          continue
        fi
        if [[ ! -e $GRIMOIRE/$SECTION/$SPELL_NAME ]]
        then
          error_msg "Spell not found in the grimoire!"
          if query "Is $SPELL_NAME a new spell in QUILL_GIT_DIR?" n
          then
            quill_final_put_in_grimoire
          fi
          unset_spell_paths
          continue
        fi

        quill_final_put_in_grimoire $GRIMOIRE $SECTION no
        unset_spell_paths
      ;;
      "${actions[12]}") #"Try it out"
        codex_get_spell_paths $(codex_find_spell_by_name $SPELL_NAME)
        if [[ ! -e $GRIMOIRE/$SECTION/$SPELL_NAME ]]
        then
          error_msg "Spell not found in the grimoire!"
          unset_spell_paths
          continue
        fi

        # three possible states:
        # 1. the files are the same, no update was made
        # 2. the files are the same, an update was made and copied over
        # 3. the files differ
        # in the case of 1 and 3 we want to confirm
        if [[ $SPELL_UPDATED == n ]]
        then
          # 1. there is no difference; there is no change
          query "Are you sure you want to cast the unchanged spell from the grimoire?" y || {
            unset_spell_paths
            continue
          }
        fi
        if ! diff -q $QUILL_SPELL_DIR/$SPELL_NAME $GRIMOIRE/$SECTION/$SPELL_NAME -x DETAILS.orig > /dev/null
        then
          # 3. the spell was changed, but not copied over yet
          query "Are you sure you want to cast the unchanged spell from the grimoire?" y || {
            unset_spell_paths
            continue
          }
        fi

        if query "Do you want to cast -r? (possibly needed for multiversion spells)" n; then
          $QUILL_SUDO -c "cast -r $SPELL_NAME"
        else
          $QUILL_SUDO -c "cast -c $SPELL_NAME"
        fi
        unset_spell_paths
      ;;
    esac

  done
else # no updates, we'll be making a spell
  SPELL_NAME=${SPELL_NAME:-$QUILL_TARGET}
  query_spell_name
  while codex_does_spell_exist $SPELL_NAME > /dev/null; do
    error_msg "This spell name is already taken!"
    gaze short $SPELL_NAME
    unset SPELL_NAME
    echo
    query_spell_name
  done
  query_spell_source_url
  # the semirandom fallback url is there to circumvent sorcery bug #13729
  trap break INT
  while ! url_verify "${SPELL_SRC_URL:-ftp://34tqgsad}" > /dev/null; do
    error_msg "Invalid URL!\n"
    message "If you're sure it is ok or want to skip this check, just hit ^C (ctrl-c)."
    unset SPELL_SRC_URL
    query_spell_source_url
  done
  trap INT

  query_spell_license
  query_spell_url
  query_spell_short_description
  query_spell_description
  query_spell_dependencies
  query_spell_optional_dependencies
  query_spell_build
  query_spell_install
  query_spell_desktop_file

  if [[ "${QUILL_MODE}" == "mage" ]] || [[ "${QUILL_MODE}" == "wizard" ]]
  then
    query_spell_pre_build
    query_spell_prepare
    query_spell_conflicts
    #-query_spell_configure
    query_spell_provides
    #-query_spell_final
    #-query_spell_triggers
    #-query_spell_solo
    #-query_spell_configs
    #-query_spell_volatiles
    if [[ "${QUILL_MODE}" == "wizard" ]]
    then
      #-  query_spell_pre_install
      #-  query_spell_post_install
      #-  query_spell_pre_remove
      #-  query_spell_post_remove
      #-  query_spell_pre_resurrect
      #-  query_spell_post_resurrect
      true
    fi
  fi


  create_spell_base

  if [[ "${SPELL_DEPENDENCIES}" != "" ]]
  then
    add_dependencies
  fi

  if [[ "${SPELL_OPTIONAL_DEPENDENCIES}" != "" ]]
  then
    add_optional_dependencies
  fi

  # add && where appropriate in DEPENDS
  if [[ -e DEPENDS ]]
  then
    andand_lines DEPENDS
  fi

  if [[ "${SPELL_CONFLICTS}" != "" ]]
  then
    add_conflicts
  fi

  if [[ "${SPELL_PROVIDES}" != "" ]]
  then
    add_provides
  fi

  # redo it for QUILL_FETCH_MODE, perhaps it didn't fetch a valid source url
  # first time for other modes
  parse_spell_source_file_info
  while [[ -z $SPELL_SANITIZED_FILE_NAME ]]; do
    if [[ -n $SPELL_SRC_FILE ]]; then
      SPELL_SANITIZED_FILE_NAME=$SPELL_SRC_FILE
      break
    fi
    error_msg "Source file couldn't be found. Check that the url is valid and downloadable!\n"
    unset SPELL_SRC_URL
    query_spell_source_url
    parse_spell_source_file_info
  done
  show_spell_source_file_info
  echo

  get_spell_source

  hunt_src_dir

  add_details

  if [[ "${PREPAREISON}" == "PREPARE, " ]]
  then
    add_prepare
  fi

  #-if [[ "${CONFIGUREISON}" == "CONFIGURE, " ]]
  #-then
  #-  add_configure
  #-fi

  if [[ "${PREBUILDISON}" == "PRE_BUILD, " ]]
  then
    add_pre_build
  fi

  if [[ "${BUILDISON}" == "BUILD, " ]]
  then
    if [[ -e $QUILL_TMP_DIR/${SPELL_SRC_FILE:-uag1au234gaugua} ]]
    then
      add_build
    #message "Quill can try to autodetect the build system the package is using."
    #message "However for this the source tarball needs to be extracted (can take a while)."
    #if query "Do you want quill to try to autodetect the build system?" n
    #then
    #  BS=$(detect_build_system)
    #  implement_build_system $BS
    else
      add_build
    fi
  fi

  if [[ "${INSTALLISON}" == "INSTALL, " ]]
  then
    if [[ -z $BS ]]; then
      add_install
    else
      implement_install_system $BS
    fi
  fi

  if [[ ! -z $BS ]]; then
    add_bs_depends $BS
  fi

  #-if [[ "${POSTINSTALLISON}" == "POST_INSTALL, " ]]
  #-then
  #-  add_post_install
  #-fi

  #-if [[ "${TRIGGERSISON}" == "TRIGGERS, " ]]
  #-then
  #-  add_triggers
  #-fi

  if [[ "${BUILD_DTFILE}" != "" ]]
  then
    add_desktop_file
  fi

  get_sources_and_urls
  for source in $sources; do
    upstream_gpg_ad && break
  done
  unset source sources sources_and_urls source_urls

  add_history "spell created"
  quill_set_executable_bit
  if query "Do you want to edit all the spell files?" n
  then
    quill_edit
  fi
  if quad_query "Do you want to tarball the spell?" $QUILL_TARBALL_SPELL
  then
    quill_final_tarball
  fi
  message ""
  message "The spell has been generated and put into: $QUILL_SPELL_DIR/$SPELL_NAME"
  if query "Do you want to put the spell into one of the available grimoires?" n
  then
    quill_final_put_in_grimoire &&
    if query "Do you want to *try* to cast the spell?" n
    then
      $QUILL_SUDO -c "cast $SPELL_NAME"
    fi
  fi
  if query "Do you want to put the spell into QUILL_GIT_DIR?" n
  then
    copy_new_to_git
  fi
fi
message "That's all folks!"

#---
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#---
